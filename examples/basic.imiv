$import imiv-stdc;

[unittest,]
fn testReturn := i32 || {
	ret 5;
};

[unittest,]
fn testArithmetic := i32 || {
	ret $((4 + 8 - 4 * 2) / 4 * 5); # 1
};

[unittest,]
fn testArithmeticVariable := i32 || {
	g := i32 const { 4 };
	g0 := i32 const { 2 };
	ret $((4 + 8 - g * g0) / g * (g+1)); # 1
};

[unittest,]
fn testVariableDefinition := i32 || {
	g := i32 const {0};
	g := {5};
	ret $(g - g + 5); # 5
};

[unittest,]
fn testVariableDefinitionOnOther := i32 || {
	g := i32 const {0};
	h := i32 const {5};
	g := {h};
	ret g;
};

fn testNamedParameter_z := i32 |namedParameter : i32 , | {
	ret namedParameter;
};

[unittest,]
fn testNamedParameter := i32 || {
	ret [testNamedParameter_z namedParameter : 5];
};

fn testMultipleParams := i32 |namedParameter0 : i32 , namedParameter1 : i32 ,| {
	ret namedParameter1;
};

fn testFnParams_Sum := i32 |x : i32, y : i32, z : i32,| {
	ret $(x + y + z);
};

[unittest,]
fn testFnParams := i32 || {
	g := i32 const {6};
	h := i32 const {4};
	ret [testFnParams_Sum x:g y:h z:-5];
};

[unittest,]
fn testFnParams2 := i32 || {
	g := i32 const {6};
	h := i32 const {4};
	ret [testFnParams_Sum x:[testFnParams_Sum x:g y:h z:-10] y:g z:-1];
};

[unittest,]
fn testFnParamsInlineArithmetic := i32 || {
	g := i32 const { 6 };
	ret [testFnParams_Sum x:$(4 - -4) y:$(4 * g) z:$(g + -32 + -1)];
};

[unittest,]
fn testFnParamsInlineArithmetic2 := i32 || {
	g := i32 const { 6 };
	ret [
		testFnParams_Sum
			x:$(4 - -4)
			y:$(4 * g)
			z:$(g + -32 + [testFnParams_Sum x:1 y:-1 z:$(-1)])
	];
};

[unittest,]
fn testInlineArithmeticOnVarDef := i32 || {
	g := i32 const { $(8 + 2) };
	g := { $(g - 5) };
	ret g;
};

[unittest,]
fn testDivByZero := i32 || {
	g := i32 const { 6 };
	ret $(1 / 0);
};

[unittest,]
fn testOverflow := i32 || {
	g := i32 const { 6 };
	ret $(9 * 9 * 9 * 9 * 9 * 9 * 9999 * 9999 * 9999 * 9999 * 9999);
};


[unittest,]
fn testsAreFinished := i32 || {
	ret 999;
};

[unittest,]
fn testStringLiteral := i32 || {
	g := i8 * { "hello world" };
	ret 0;
};

#[]
#fn testParamMismatch := i32 || {
#	ret [testFnParams_Sum x:4 y:2 z:0]; # rename to a if u dare
#};

fn main := i32 || {
	ret 0;
};
ret 0;

#[imiv println msg:{"hello world forever!", "and ever!",}];
#[imiv println]; # empty line
#[imiv println msg:"hello world"];
#
## type unnecessary
#x := "hello world";
#y : String := "hello world";
#
## note that basic units can not be arrays, ei there is no float[] or char[],
## 	instead, they can only be scalars. Since each object is an array of
## 	objects, the correct way to go about this is to wrap these types in a
## 	struct
#
#[imiv println:x];
#
#circle := Struct {
#	radius : float;
#	originX : float;
#	originY : float;
#
#	# remember that what you are getting here is not one instance of circle,
#	# it is a whole array of circles
#	averageDistance := Fn : float {
#		|self : circle|
#
#		ret [
#			reduce
#				array:  [self radius]
#				lambda: [|f0 : float, f1 : float | ret [+ f0 f1]]
#		];
#	};
#
#	moveOrigin := Fn : void {
#		|self : circle, originX : float, originY : float|
#
#		# the for loop will unroll/inline the lambda, if this is not wanted
#		# then you could use `forIndirect` i guess?
#		ret [
#			for
#				array: self
#				lambda: [|inst| [inst originX] :+= originX; [inst originY] :+= originY;]
#		];
#	};
#
#	mapOrigin := Fn : void {
#		|self : circle, mapper : ^|originX:float, originY:float||
#
#		ret [
#			for
#				array: self
#				lambda: [
#					| inst | [mapper originX: [inst originX] originY: [inst originY]]
#				]
#		];
#	};
#
#
#	Color := Struct {
#		red : float;
#		green : float;
#		blue : float;
#	};
#
#	color : Color;
#};
#
#rectangle := Struct {
#	radius : float;
#};
#
#testCircles : circle := [imiv allocate::circle length:50];
#testRects   : rectangle := [imiv allocate::rectangle length:10];
#
#[
#	forWithIterator
#		array: testCircles
#		lambda: [
#			| it : size_t, inst |
#			
#			[inst originX] := [imiv cast from:it to:float];
#			[inst originY] := [imiv cast from:[+ it 20] to:float];
#		]
#];
#
#[imiv printf msg:[testCircle averageDistance]]; # self passed in automatically
#
## or can be static
#[testCircle averageDistance:[allocator withType:circle length:100]];
#
## and can pass anything you want in as long as it satisfies the same kind of
##     kind of restraints used in the function
#[circle averageDistance:testRects];
